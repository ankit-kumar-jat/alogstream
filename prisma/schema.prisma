// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String  @id @default(cuid())
  email           String  @unique
  name            String?
  isEmailVerified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password         Password?
  sessions         Session[]
  BrokerAccount    BrokerAccount[]
  Signal           Signal[]
  Strategy         Strategy[]
  DailyTradeReport DailyTradeReport[]
  SignalLogs       SignalLogs[]
  UserNotification UserNotification[]
  OrderHistory     OrderHistory[]
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model BrokerAccount {
  id String @id @default(cuid())

  broker          String
  clientName      String
  clientId        String
  authToken       String
  refreshToken    String
  feedToken       String
  isLoginRequired Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  signals          Signal[]
  DailyTradeReport DailyTradeReport[]
  OrderHistory     OrderHistory[]

  @@unique([userId, clientId], name: "brokerAccountIdentifier")
}

model OrderHistory {
  id String @id @default(cuid())

  brokerOrderId       String @unique
  brokerUniqueOrderId String @unique
  clientId            String // clientCode of broker account

  price          Decimal?
  avgPrice       Decimal?
  qty            Int
  lotSize        Int
  filledShares   Int
  unfilledShares Int
  status         OrderStatus // PENDING, OPEN, EXECUTED, REJECTED
  txnType        TxnType // BUY, SELL
  variety        OrderVariety
  orderType      BrokerOrderType
  productType    ProductType
  exchange       Exchange
  symbol         String
  symbolToken    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  signal   Signal @relation(fields: [signalId], references: [id], onDelete: Cascade)
  signalId String

  brokerAccount   BrokerAccount @relation(fields: [brokerAccountId], references: [id], onDelete: Cascade)
  brokerAccountId String

  parentOrderId String?
  parentOrder   OrderHistory?  @relation("ParentOrderHistory", fields: [parentOrderId], references: [id])
  parentOrders  OrderHistory[] @relation("ParentOrderHistory")

  @@unique([brokerOrderId, clientId], name: "orderIdentifier")
}

// strategy is the one that generates signals 
// if you use trdingview than no stratagy required
model Strategy {
  id String @id @default(cuid())

  name        String
  description String
  label       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Signal {
  id String @id @default(cuid())

  name        String
  description String?
  label       String?

  status SignalStatus @default(DRAFT) // DRAFT, ACTIVE, INACTIVE, ARCHIVED
  type   String // DELIVERY, CARRYFORWARD, MARGIN, INTRADAY

  exchange           Exchange
  tickerSymbol       String
  tickerSymbolToken  String
  allocatedFund      Decimal
  targetStopLossType TargetStopLossType //  POINTS or PERCENTAGE
  takeProfitValue    Decimal
  stopLossValue      Decimal
  size               Int // how many lots/shares to buy
  lotSize            Int                @default(1) // Maximum number of orders in same direction
  pyramiding         Int                @default(1) // Maximum number of orders in same direction

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  brokerAccounts BrokerAccount[]

  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  SignalLogs       SignalLogs[]
  UserNotification UserNotification[]
  OrderHistory     OrderHistory[]
}

model DailyTradeReport {
  id          String   @id @default(cuid())
  exchange    Exchange
  symbol      String
  symbolToken String
  buyQty      Int
  sellQty     Int
  pnl         Decimal

  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  brokerAccount   BrokerAccount @relation(fields: [brokerAccountId], references: [id])
  brokerAccountId String
}

model SignalLogs {
  id        String   @id @default(cuid())
  body      Json
  createdAt DateTime @default(now())

  signal   Signal @relation(fields: [signalId], references: [id], onDelete: NoAction)
  signalId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Notification {
  id      String           @id @default(cuid())
  title   String
  message String
  type    NotificationType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserNotification UserNotification[]
}

model UserNotification {
  id          String   @id @default(cuid())
  isRead      Boolean
  isDelivered Boolean
  metadata    Json?
  createdAt   DateTime @default(now())

  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: NoAction)
  notificationId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  Signal         Signal?      @relation(fields: [signalId], references: [id])
  signalId       String?
}

model Instrument {
  token    String   @id
  symbol   String
  name     String
  expiry   String?
  type     String?
  exchange Exchange
  tickSize Decimal
  lotSize  Int
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
}

enum SignalStatus {
  DRAFT
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum Exchange {
  BSE
  NSE
  NFO
  MCX
  BFO
  CDS
  NCDEX
  NCO
}

enum TargetStopLossType {
  POINTS
  PERCENTAGE
}

enum TxnType {
  BUY
  SELL
}

enum OrderVariety {
  NORMAL
  STOPLOSS
  AMO
  ROBO
}

enum BrokerOrderType {
  MARKET
  LIMIT
  STOPLOSS_LIMIT
  STOPLOSS_MARKET
}

enum OrderStatus {
  PENDING
  TRIGGER_PENDING
  OPEN
  EXECUTED
  CANCELED
}

enum ProductType {
  DELIVERY
  CARRYFORWARD
  MARGIN
  INTRADAY
  BO
}
