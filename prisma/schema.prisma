// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String  @id @default(cuid())
  email           String  @unique
  name            String?
  isEmailVerified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password      Password?
  sessions      Session[]
  BrokerAccount BrokerAccount[]
  Signals       Signals[]
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model BrokerAccount {
  id String @id @default(cuid())

  broker          String
  clientName      String
  clientId        String  @unique
  authToken       String
  refreshToken    String
  feedToken       String
  isLoginRequired Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  Signals Signals?
}

model Signals {
  id String @id @default(cuid())

  budget          Decimal
  remainingBudget Decimal
  exchange        Exchnage
  symbol          String
  symbolToken     String
  quantity        Int
  takeProfitType  ProfitLossType
  stopLossType    ProfitLossType
  takeProfitValue Decimal
  stopLossValue   Decimal
  isActive        Boolean        @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  brokerAccountId String        @unique
  brokerAccount   BrokerAccount @relation(fields: [brokerAccountId], references: [id], onDelete: Cascade)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

enum Exchnage {
  BSE
  NSE
}

enum ProfitLossType {
  ABSOLUTE
  PERCENTAGE
}
